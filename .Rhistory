ilTraining <- training[,grep("^IL", colnames(training))]
preprocPca <- preProcess(ilTraining, method="pca")
preprocPcaThresh08 <- preProcess(ilTraining, method="pca", thresh=0.8)
trainPcaThresh08 <- predict(preprocPcaThresh08,ilTraining)
modelPcaThresh08 <- train(training$diagnosis ~ ., method="glm", data=trainPcaThresh08)
modelPcaThresh08
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifylibraries', 'ramnathv')
shiny::runApp('Desktop/Coursera/DataScienceSpecialization/courses/09_DevelopingDataProducts/project')
shiny::runApp('Desktop/Coursera/DataScienceSpecialization/courses/09_DevelopingDataProducts/project')
shiny::runApp('Desktop/Coursera/DataScienceSpecialization/courses/09_DevelopingDataProducts/project')
policeSiren <- iris
rename(policeSiren, c("Petal.Width" = "Video.Duration", "Sepal.Width" = "Siren.Duration"))
shiny::runApp('Desktop/Coursera/DataScienceSpecialization/courses/09_DevelopingDataProducts/project')
shiny::runApp('Desktop/Coursera/DataScienceSpecialization/courses/09_DevelopingDataProducts/project')
policeSiren <- iris
rename(policeSiren, c("Petal.Width" = "Video.Duration", "Sepal.Width" = "Siren.Duration", "Species" = "Instructor"))
qplot(Video.Duration,Siren.Duration,colour=Instructor,data=policeSiren)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
qplot(Video.Duration,Siren.Duration,colour=Instructor,data=policeSiren)
qplot(Video.Duration,Siren.Duration,colour=Instructor,data=policeSiren)
shiny::runApp('Desktop/Coursera/DataScienceSpecialization/courses/09_DevelopingDataProducts/project')
library(ggplot2)
import.packages("DDPQuiz3")
install.packages("DDPQuiz3")
library(DDPQuiz3)
?show
?lm
?colSums
?dgamma
?show
?colSums
?show
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
diagnosis
predictors
head(predictors)
createDataPartition(diagnosis, p = 0.50,list=FALSE)
createDataPartition(diagnosis, p = 0.50)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
training
View(training)
trainIndex = createDataPartition(diagnosis,p=0.5)
training = adData[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(mixtures)
hist(training,Superplasticizer)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
View(training)
58:69
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training[c(1, 58:69),]
head(training[c(1, 58:69),])
head(training[,c(1, 58:69)])
prcomp(training[,58:69])
prcomps <- prcomp(training[,58:69])
summary(prcomps)
preProcess(training[,58:69])
preProcess(training[,58:69],method="pca")
?preProcess
preProcess(training[,58:69],method="pca",thresh=0.8)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
---
title: "Statistical Inference - Course Project"
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
View(concrete)
hist(concrete$Superplasticizer)
hist(log10(concrete$Superplasticizer))
hist(log10(concrete$Superplasticizer + 1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
View(training)
View(training)
training[,1]
names(training)
training[,58:69]
preProcess(training[,58:69],method="pca")
preProc <- preProcess(training[,58:69],method="pca")
?preProcess
preProc <- preProcess(training[,58:69],method="pca",thresh=0.9)
preProcess(training[,58:69],method="pca",thresh=0.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(adData)
View(adData)
names(adData)
trainingIL <- training[,c(1,58:69)]
View(trainingIL)
View(trainingIL)
preProcess(trainingIL,method="pca",thres=0.8)
preProcess(trainingIL[,-1],method="pca",thres=0.8)
preProcIL <- preProcess(trainingIL[,-1],method="pca",thres=0.8)
trainIL <- predict(preProcIL,trainingIL[,-1])
View(trainIL)
View(trainIL)
modelIL <- train(trainingIL$diagnosis,method="glm",data=trainIL)
trainingIL$diagnosis
modelIL <- train(trainingIL$diagnosis ~ .,method="glm",data=trainIL)
summary(modelIL)
modelIL
modelIL <- train(trainingIL$diagnosis ~ .,method="glm",data=trainingIL)
modelIL <- train(trainingIL$diagnosis ~ .,method="glm",data=trainIL)
modelingIL <- train(trainingIL$diagnosis ~ .,method="glm",data=trainingIL)
modelIL
modelIL <- train(trainingIL$diagnosis ~ .,method="glm",data=trainIL)
modelIL
modelingIL <- train(trainingIL$diagnosis ~ .,method="glm",data=trainingIL)
modelingIL
modelIL
modelIL <- train(trainingIL$diagnosis ~ .,method="glm",data=trainIL)
modelIL
modelingIL <- train(trainingIL$diagnosis ~ .,method="glm",data=trainingIL)
modelingIL
modelingIL <- train(trainingIL$diagnosis ~ .,method="glm")
modelingIL <- train(diagnosis ~ .,method="glm", data=trainingIL)
modelingIL
AppliedPredictiveModeling: v1.1.6
caret: v6.0.47
ElemStatLearn: v2012.04-0
pgmm: v1.1
rpart: v4.1.8
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
testData <- segmentationOriginal[segmentationOriginal$Case=="Test",]
trainData <- segmentationOriginal[segmentationOriginal$Case=="Train",]
View(testData)
View(testData)
View(trainData)
View(trainData)
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=trainData)
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE)
plot(modFit$finalModel,uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
plot(modFit$finalModel,uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
View(olive)
oliveModel <- train(Area ~ ., method="rpart", data=olive)
library(AppliedPredictiveModeling)
library(caret)
oliveModel <- train(Area ~ ., method="rpart", data=olive)
?train
getModelInfo()
oliveModel <- train(Area ~ ., method="rpart", data=olive)
print(oliveModel$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(newdata)
View(olive)
View(olive)
View(newdata)
View(newdata)
View(olive)
?tree
install.packages("tree")
library(tree)
tree?
?
?tree
oliveModel <- tree(Area ~ ., olive)
print(oliveModel)
plot(oliveModel)
plot(oliveModel, uniform=TRUE)
text(oliveModel, use.n=TRUE, all=TRUE, cex=.8)
plot(oliveModel, uniform=TRUE)
text(oliveModel, use.n=TRUE, all=TRUE, cex=.8)
View(newdata)
View(newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
View(trainSA)
trainModel <- train(chd ~ age+alcohol+adiposity+tobacco+typea+ldl, method="glm", data=trainSA, family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
print(trainModel)
predict(trainModel, newdata=trainSA)
predict(trainModel, newdata=testSA)
missClass
missClass(trainSA$chd, predict(trainModel,newdata = trainSA))
missClass(testSA$chd, predict(trainModel,newdata = testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test
vowel.train
View(vowel.test)
View(vowel.test)
as.factor(vowel.test$y)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
View(vowel.test)
View(vowel.test)
View(vowel.train)
set.seed(33833)
vowelTrainFit <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
print(vowelTrainFit)
varImp(vowelTrainFit)
demo()
harTrainingData <- read.csv("pml-training.csv")
harTestingData <- read.csv("pml-testing.csv")
pwd()
pwd
cd
setwd("~/Desktop/Coursera/DataScienceSpecialization/courses/08_PracticalMachineLearning/PracticalMachineLearningProject/PracticalMachineLearningProject")
harTrainingData <- read.csv("pml-training.csv")
harTestingData <- read.csv("pml-testing.csv")
View(harTrainingData)
View(harTrainingData)
View(harTestingData)
View(harTestingData)
names(harTrainingData)
harTrainingData[,c(1,160)]
harTrainingData
harTrainingDataPca <- preProcess(harTestingData, method="pca")
library(caret)
harTrainingDataPca <- preProcess(harTestingData, method="pca")
harTrainingData[1:10,-1]
harTrainingData[1:10,c(-1:-130)]
trainingLdaModel <- train(classe ~. data=harTrainingData[,-1], method="lda")
trainingLdaModel <- train(classe ~ ., data=harTrainingData[,-1], method="lda")
warnings()
trainingLdaModel <- train(classe ~ ., data=harTrainingData[,-1], method="lda")
harTrainingDataRaw <- read.csv("pml-training.csv")
harTestingDataRaw <- read.csv("pml-testing.csv")
names(harTrainingDataRaw)
harTrainingDataRaw <- read.csv("pml-training.csv")
harTestingDataRaw <- read.csv("pml-testing.csv")
names(harTrainingDataRaw)
harTrainingData <- harTrainingDataRaw[,-1:-7]
harTestingData <- harTestingDataRaw[,-1:-7]
harTrainingData$classe <- as.factor(harTrainingData$classe)
View(harTestingData)
View(harTestingData)
harTrainingData$kurtosis_picth_belt == "#DIV/0!"
class(harTrainingData)
class(harTrainingData$kurtosis_yaw_belt)
as.numeric(harTrainingData$kurtosis_yaw_belt)
as.character(harTrainingData$kurtosis_yaw_belt)
installed.packages("purrr")
library(purrr)
install.packages("purrr")
library(purrr)
harTestingData %>% map_if(is.factor, as.character) -> harTestingData
names(harTestingData)
class(harTestingData)
harTestingData$problem_id
harTrainingData %>% map_if(is.factor, as.character) -> harTrainingData
View(harTestingData)
harTrainingDataRaw <- read.csv("pml-training.csv")
harTestingDataRaw <- read.csv("pml-testing.csv")
names(harTrainingDataRaw)
names(harTrainingDataRaw)
names(harTestingDataRaw)
View(harTestingDataRaw)
View(harTestingDataRaw)
harTrainingDataRaw <- read.csv("pml-training.csv")
harTestingDataRaw <- read.csv("pml-testing.csv")
names(harTrainingDataRaw)
head(harTrainingDataRaw)
harTrainingData <- null
harTrainingData <- NULL
harTestingData <- NULL
trainingFactors <- sapply(harTrainingDataRaw, is.factor)
trainingFactors
harTrainingData <- harTrainingDataRaw[,-1:-7]
harTrainingData <- data.frame(lapply(harTrainingData, as.character), stringsAsFactors = FALSE)
View(harTrainingData)
View(harTrainingData)
harTrainingData$avg_pitch_dumbbell
is.na(harTrainingData$avg_pitch_dumbbell)
harTrainingData <- <- as.data.frame(lapply(test,function(x) if(is.character(x)|is.factor(x)) gsub("#DIV/0!","0",x) else x)))
harTrainingData <- as.data.frame(lapply(test,function(x) if(is.character(x)|is.factor(x)) gsub("#DIV/0!","0",x) else x)))
harTrainingData <- as.data.frame(lapply(test,function(x) if(is.character(x)|is.factor(x)) gsub("#DIV/0!","0",x) else x))
harTrainingData <- as.data.frame(lapply(harTrainingData,function(x) if(is.character(x)|is.factor(x)) gsub("#DIV/0!","0",x) else x))
View(harTrainingData)
View(harTrainingData)
harTrainingData <- as.data.frame(lapply(harTrainingData,function(x) if(is.na(x)) "0"))
harTrainingDataRaw <- read.csv("pml-training.csv")
harTestingDataRaw <- read.csv("pml-testing.csv")
names(harTrainingDataRaw)
harTrainingData <- harTrainingDataRaw[,-1:-7]
harTrainingData <- as.data.frame(lapply(harTrainingData,function(x) if(is.character(x)|is.factor(x)) gsub("#DIV/0!","0",x) else x))
harTrainingData <- as.data.frame(lapply(harTrainingData,function(x) if(is.character(x)) gsub("","0",x) else x))
View(harTrainingData)
harTrainingData[is.na(harTrainingData)] <- "0"
View(harTrainingData)
View(harTrainingData)
hartrainingData == ""
harTrainingData == ""
harTrainingData[harTrainingData == ""] <- "0"
View(harTrainingData)
View(harTestingDataRaw)
harTrainingData <- harTrainingDataRaw[,-1:-7]
View(harTrainingData)
harTrainingData <- data.frame(lapply(harTrainingData, as.character), stringsAsFactors = FALSE)
View(harTrainingData)
harTrainingData[is.na(harTrainingData)] <- "0"
View(harTrainingData)
harTrainingData[harTrainingData == "#DIV/0!"] <- "0"
harTrainingData[harTrainingData == ""] <- "0"
View(harTrainingData)
harTrainingData[,-153] <- data.frame(lapply(harTrainingData[,-153], as.numeric))
class(harTrainingData)
class(harTrainingData[1])
class(harTrainingData$classe)
class(harTrainingData$roll_belt)
class(harTrainingData$total_accel_belt)
View(harTrainingData)
harTrainingData$classe <- as.factor(harTrainingData$classe)
class(harTrainingData$classe)
View(harTrainingData)
harTrainingData[is.null(harTrainingData)] <- "0"
View(harTrainingData)
harTrainingData <- harTrainingDataRaw[,-1:-7]
harTrainingData <- data.frame(lapply(harTrainingData, as.character), stringsAsFactors = FALSE)
harTrainingData[is.na(harTrainingData)] <- "0"
harTrainingData[is.null(harTrainingData)] <- "0"
harTrainingData[harTrainingData == "#DIV/0!"] <- "0"
harTrainingData[harTrainingData == ""] <- "0"
harTrainingData[,-153] <- data.frame(lapply(harTrainingData[,-153], as.numeric))
harTrainingData$classe <- as.factor(harTrainingData$classe)
View(harTrainingData)
harTrainingLdaModel <- (classe ~ ., data=harTrainingData, method="lda")
harTrainingLdaModel <- train(classe ~ ., data=harTrainingData, method="lda")
harTrainingLdaModel <- train(classe ~ ., data=harTrainingData, method="nb")
warning()
warnings()
asdf
?preProcess
harTrainingPca <- preProcess(harTrainingData,method="pca",thresh = 0.9)
harTrainingPca <- preProcess(harTrainingData[,-153],method="pca",thresh = 0.9)
harTrainingPca
harTrainingPca <- preProcess(harTrainingData[,-153],method="pca",thresh = 0.9, scale=FALSE)
subset(harTrainingData, select=-c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt, kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbbell, kurtosis_yaw_forearm, skewness_yaw_forearm, amplitude_yaw_forearm))
harTrainingData <- subset(harTrainingData, select=-c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt, kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbbell, kurtosis_yaw_forearm, skewness_yaw_forearm, amplitude_yaw_forearm))
harTrainingPca <- preProcess(harTrainingData[,-144],method="pca",thresh = 0.9)
print(harTrainingPca)
harTrainingData <- harTrainingDataRaw[,-1:-7]
harTrainingData <- data.frame(lapply(harTrainingData, as.character), stringsAsFactors = FALSE)
harTrainingData[is.na(harTrainingData)] <- "0"
harTrainingData[is.null(harTrainingData)] <- "0"
harTrainingData[harTrainingData == "#DIV/0!"] <- "0"
harTrainingData[harTrainingData == ""] <- "0"
harTrainingData <- subset(harTrainingData, select=-c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt, kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbbell, kurtosis_yaw_forearm, skewness_yaw_forearm, amplitude_yaw_forearm))
harTrainingData[,-144] <- data.frame(lapply(harTrainingData[,-144], as.numeric))
harTrainingData$classe <- as.factor(harTrainingData$classe)
View(harTrainingData)
harTrainingPca <- preProcess(harTrainingData[,-144],method="pca",thresh = 0.95)
print(harTrainingPca)
harTrainingPca <- preProcess(harTrainingData,method="pca",thresh = 0.95)
harTrainingPca <- preProcess(harTrainingData[,-144],method="pca",thresh = 0.95)
print(harTrainingPca)
harTrainingLdaModel <- train(classe ~ ., data=harTrainingData, method="lda")
warnings()
harTrainingNbModel <- train(classe ~ ., data=harTrainingData, method="nb")
harTrainingNbModel <- train(classe ~ ., data=harTrainingData, method="rf")
harTrainingPca <- preProcess(harTrainingData,method="pca",thresh = 0.90)
harTrainingPca <- preProcess(harTrainingData[,-144],method="pca",thresh = 0.90)
harTrainingPca <- preProcess(harTrainingData[,-144],method="pca",thresh = 0.90)
harTrainingPca$rotation
print(harTrainingPca)
predict(harTrainingPca,harTrainingData[,-144])
harTrainingPrediction <- predict(harTrainingPca,harTrainingData[,-144])
View(harTrainingPrediction)
harTrainingModel <- train(harTrainingData$classe ~ ., method="glm", data=harTrainingPrediction)
harTrainingData <- harTrainingDataRaw[,-1:-7]
harTrainingData <- data.frame(lapply(harTrainingData, as.character), stringsAsFactors = FALSE)
harTrainingData[is.na(harTrainingData)] <- "0"
harTrainingData[is.null(harTrainingData)] <- "0"
harTrainingData[harTrainingData == "#DIV/0!"] <- "0"
harTrainingData[harTrainingData == ""] <- "0"
harTrainingData <- subset(harTrainingData, select=-c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt, kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbbell, kurtosis_yaw_forearm, skewness_yaw_forearm, amplitude_yaw_forearm))
harTrainingData[,-144] <- data.frame(lapply(harTrainingData[,-144], as.numeric))
harTrainingData$classe <- as.factor(harTrainingData$classe)
harTrainingPca <- preProcess(harTrainingData[,-144],method="pca",thresh = 0.90)
inTrain <- createDataPartition(y=harTrainingData$classe, p=0.6, list=FALSE)
harTrainingDataRaw <- read.csv("pml-training.csv")
harTrainingData <- harTrainingDataRaw[,-1:-7]
harTrainingData <- data.frame(lapply(harTrainingData, as.character), stringsAsFactors = FALSE)
harTrainingData[is.na(harTrainingData)] <- "0"
harTrainingData[is.null(harTrainingData)] <- "0"
harTrainingData[harTrainingData == "#DIV/0!"] <- "0"
harTrainingData[harTrainingData == ""] <- "0"
harTrainingData <- subset(harTrainingData, select=-c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt, kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbbell, kurtosis_yaw_forearm, skewness_yaw_forearm, amplitude_yaw_forearm))
harTrainingData[,-144] <- data.frame(lapply(harTrainingData[,-144], as.numeric))
harTrainingData$classe <- as.factor(harTrainingData$classe)
inTrain <- createDataPartition(y=harTrainingData$classe, p=0.6, list=FALSE)
trainingModelData <- harTrainingData[inTrain]
testingModelData <- harTrainingData[-inTrain]
inTrain <- createDataPartition(y=harTrainingData$classe, p=0.6, list=FALSE)
trainingModelData <- harTrainingData[inTrain,]
testingModelData <- harTrainingData[-inTrain,]
View(trainingModelData)
View(testingModelData)
modelFit <- train(trainingModelData$classe ~ ., method="glm", preProcess="pca", data=trainingModelData)
View(testingModelData)
trainingModelData$classe
modelFit <- train(trainingModelData$classe ~ ., method="rf", preProcess="pca", data=trainingModelData)
harTrainingDataRaw <- read.csv("pml-training.csv")
harTrainingData <- harTrainingDataRaw[,-1:-7]
is.na(harTrainingData)
na_var <- apply(!is.na(harTrainingData),2,sum) #identifying the no of NAs in each column
na_var <- na_var == nrow(harTrainingData)  #Identifying columns that don't have complete data without NA
harTrainingDataAfter <- harTrainingData[ , na_var]  #Filtering out variables with NA values
View(harTrainingDataAfter)
nearZeroVar(harTrainingDataAfter)
na_var <- apply(!is.na(harTrainingData),2,sum) #identifying the no of NAs in each column
na_var <- na_var == nrow(harTrainingData)  #Identifying columns that don't have complete data without NA
harTrainingDataAfter <- harTrainingData[ , na_var]  #Filtering out variables with NA values
harTrainingDataAfterAfter <- harTrainingDataAfter[,-nearZeroVar(harTrainingDataAfter)]
View(harTrainingDataAfterAfter)
View(harTrainingDataAfterAfter)
inTrain = createDataPartition(y = harTrainingDataAfterAfter$classe, p = 0.7, list = FALSE)
trainMod <- harTrainingDataAfterAfter[inTrain,]
testMod <- harTrainingDataAfterAfter[-inTrain,]
modFit2 = train(classe ~., method = "rpart", data = harTrainingDataAfterAfter)
inTrain = createDataPartition(y = harTrainingDataAfterAfter$classe, p = 0.7, list = FALSE)
trainMod <- harTrainingDataAfterAfter[inTrain,]
testMod <- harTrainingDataAfterAfter[-inTrain,]
modFit2 = train(classe ~., method = "rf", data = harTrainingDataAfterAfter)
